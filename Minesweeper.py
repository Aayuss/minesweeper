import randomWELL_PLAYED = "WELL PLAYED"GAME_OVER = "GAME OVER"def print_pattern():    j = 1    print_dashes()    for i in ge:        print(" " + ge[j - 1] + " ", end="")        if j % ncb == 0:            print("|")            print_dashes()        else:            print("|", end="")        j += 1    print("\n")def print_dashes():    print("|", end="")    count = int(4.300 * ncb - 1.800)    for k in range(count):        print("-", end="")    print("|")    print("|", end="")def generate_bombs_and_numbers():    rand_nob = random.randint(1, int(len(ge_bp) / 2))    for x in range(rand_nob):        rand_bomb_position = random.randint(0, len(ge) - 1)        if rand_bomb_position == ui:            x -= 1            continue        ge_bp[rand_bomb_position] = "🧨"        ge_end_checker = "🧨"def generate_numbers():    for x in range(len(ge_bp)):        bomb_counter = 0        if ge_bp[x] != "🧨":            if (x + 1 < ncb * ncb) and (x % ncb != ncb - 1):                if ge_bp[x + 1] == "🧨":                    bomb_counter += 1            if (x - 1 >= 0) and (x % ncb != 0):                if ge_bp[x - 1] == "🧨":                    bomb_counter += 1            if x - ncb >= 0:                if ge_bp[x - ncb] == "🧨":                    bomb_counter += 1            if (x - 1 - ncb >= 0) and (x % ncb != 0):                if ge_bp[x - 1 - ncb] == "🧨":                    bomb_counter += 1            if (x + 1 - ncb >= 0) and (x % ncb != ncb - 1):                if ge_bp[x + 1 - ncb] == "🧨":                    bomb_counter += 1            if x + ncb < ncb * ncb:                if ge_bp[x + ncb] == "🧨":                    bomb_counter += 1            if (x + 1 + ncb < ncb * ncb) and (x % ncb != ncb - 1):                if ge_bp[x + 1 + ncb] == "🧨":                    bomb_counter += 1            if (x - 1 + ncb < ncb * ncb) and (x % ncb != 0):                if ge_bp[x - 1 + ncb] == "🧨":                    bomb_counter += 1            ge_bp[x] = str(bomb_counter)def search_for_bombblast(ui):    # for _ in ge_bp:    if (ge_bp[ui] == "🧨"):        return GAME_OVER    else:        return WELL_PLAYEDdef show_initial_opening():    if ncb > 3:        ge[ui] = ge_bp[ui]        ge_end_checker[ui] = ge_bp[ui]        if ge_bp[ui-ncb] != "🧨":            ge[ui-ncb] = ge_bp[ui-ncb]            ge_end_checker[ui-ncb] = ge_bp[ui-ncb]        if ge_bp[ui+ncb] != "🧨":            ge[ui+ncb] = ge_bp[ui+ncb]            ge_end_checker[ui + ncb] = ge_bp[ui + ncb]        if (ge_bp[ui+ncb+1] != "🧨") and (ui+1+ncb < ncb * ncb):            ge[ui+ncb+1] = ge_bp[ui+ncb+1]            ge_end_checker[ui + ncb + 1] = ge_bp[ui + ncb + 1]        print_pattern()    else:        ge[ui] = ge_bp[ui]        print_pattern()# ------------------------------------ #ncb = int(input("What's the row size: "))ge = ["■"] * ncb * ncbge_bp = ["■"] * ncb * ncbge_end_checker = ge# ge = ge_bpprint_pattern()ui = int(input("Enter the initial guess: "))generate_bombs_and_numbers()generate_numbers()show_initial_opening()while 1:    ui = int(input("Enter a position value: "))    if (search_for_bombblast(ui) == GAME_OVER):        print("❌ YOU LOST THE GAME ❌")        break    else:        ge[ui] = ge_bp[ui]        ge_end_checker[ui] = ge_bp[ui]        print_pattern()    if (ge_end_checker == ge_bp):        print("✅🥳 YOU'VE WON THE GAMEEEEEEEEEEEEEEE 🥳✅")        break;